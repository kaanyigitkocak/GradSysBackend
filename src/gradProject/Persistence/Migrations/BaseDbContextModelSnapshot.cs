// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CourseCode");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CourseName");

                    b.Property<int>("CourseType")
                        .HasColumnType("integer")
                        .HasColumnName("CourseType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("DepartmentId");

                    b.Property<int>("Ects")
                        .HasColumnType("integer")
                        .HasColumnName("Ects");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CourseCode = "MATH 141",
                            CourseName = "Calculus I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(450),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000014"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            CourseCode = "PHYS 121",
                            CourseName = "Physics I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(450),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000012"),
                            Ects = 7
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            CourseCode = "CENG 111",
                            CourseName = "Introduction to Computer Engineering",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(450),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            CourseCode = "CENG 113",
                            CourseName = "Introduction to Programming",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(450),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            CourseCode = "CENG 115",
                            CourseName = "Discrete Structures",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(460),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            CourseCode = "ENG 101",
                            CourseName = "Academic English I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(460),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000019"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000007"),
                            CourseCode = "MATH 142",
                            CourseName = "Calculus II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(460),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000014"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000008"),
                            CourseCode = "PHYS 122",
                            CourseName = "Physics II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(470),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000012"),
                            Ects = 8
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000009"),
                            CourseCode = "MATH 144",
                            CourseName = "Finite Mathematics",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(470),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000014"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000010"),
                            CourseCode = "CENG 112",
                            CourseName = "Data Structures",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(470),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000011"),
                            CourseCode = "ECON 106",
                            CourseName = "Principles of Economics",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(480),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000012"),
                            CourseCode = "ENG 102",
                            CourseName = "Academic English II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(480),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000019"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000013"),
                            CourseCode = "GCC 101",
                            CourseName = "Career Planning and Development",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(480),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 0
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000014"),
                            CourseCode = "CENG 211",
                            CourseName = "Fundamentals of Programming",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(490),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000015"),
                            CourseCode = "CENG 213",
                            CourseName = "Theory of Computation",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(490),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000016"),
                            CourseCode = "CENG 215",
                            CourseName = "Circuits and Electronics",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(490),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000017"),
                            CourseCode = "MATH 255",
                            CourseName = "Differential Equations",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(490),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000014"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000018"),
                            CourseCode = "HIST 201",
                            CourseName = "History of Turkish Republic I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(500),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000019"),
                            CourseCode = "TURK 201",
                            CourseName = "Turkish Language I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(500),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000020"),
                            CourseCode = "HIST 203",
                            CourseName = "History of Turkish Revolution I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(500),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000021"),
                            CourseCode = "TURK 203",
                            CourseName = "Turkish for International Students I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(500),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000022"),
                            CourseCode = "CENG 212",
                            CourseName = "Programming Language Concepts",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(510),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000023"),
                            CourseCode = "CENG 214",
                            CourseName = "Logic Design",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(510),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000024"),
                            CourseCode = "CENG 216",
                            CourseName = "Numerical Computing",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(510),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000025"),
                            CourseCode = "CENG 218",
                            CourseName = "Analysis and Design of Algorithms",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(510),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000026"),
                            CourseCode = "CENG 222",
                            CourseName = "Probability and Statistics",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(520),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 5
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000027"),
                            CourseCode = "HIST 202",
                            CourseName = "History of Turkish Republic II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(520),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000028"),
                            CourseCode = "TURK 202",
                            CourseName = "Turkish Language II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(520),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000029"),
                            CourseCode = "HIST 204",
                            CourseName = "History of Turkish Revolution II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(520),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000030"),
                            CourseCode = "TURK 204",
                            CourseName = "Turkish for International Students II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(530),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 2
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000031"),
                            CourseCode = "CENG 311",
                            CourseName = "Computer Architecture",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(530),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 8
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000032"),
                            CourseCode = "CENG 315",
                            CourseName = "Information Management",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(540),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000033"),
                            CourseCode = "CENG 312",
                            CourseName = "Computer Networks",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(540),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000034"),
                            CourseCode = "CENG 316",
                            CourseName = "Software Engineering",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(540),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000035"),
                            CourseCode = "CENG 318",
                            CourseName = "Human-Computer Interaction",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(540),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000036"),
                            CourseCode = "CENG 322",
                            CourseName = "Operating Systems",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(550),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 8
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000037"),
                            CourseCode = "CENG 411",
                            CourseName = "Professionalism in Computer Engineering",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(550),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 6
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000038"),
                            CourseCode = "CENG 415",
                            CourseName = "Undergraduate Thesis and Seminar I",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(550),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 8
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000039"),
                            CourseCode = "CENG 416",
                            CourseName = "Undergraduate Thesis and Seminar II",
                            CourseType = 1,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(560),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 8
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000040"),
                            CourseCode = "CENG 370",
                            CourseName = "Mainframe Computers",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(560),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000041"),
                            CourseCode = "CENG 381",
                            CourseName = "Stochastic Processes",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(560),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000042"),
                            CourseCode = "CENG 382",
                            CourseName = "Information Theory",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(560),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000043"),
                            CourseCode = "CENG 383",
                            CourseName = "Real-Time Systems",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(570),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000044"),
                            CourseCode = "CENG 384",
                            CourseName = "Microprocessors",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(570),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000045"),
                            CourseCode = "CENG 385",
                            CourseName = "Mathematical Logic",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(570),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000046"),
                            CourseCode = "CENG 386",
                            CourseName = "Fuzzy Logic Systems",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(570),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000047"),
                            CourseCode = "CENG 388",
                            CourseName = "Web Programming",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(580),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000048"),
                            CourseCode = "CENG 389",
                            CourseName = "Mobile Application Development",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(580),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000049"),
                            CourseCode = "CENG 390",
                            CourseName = "Cloud Computing",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(580),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000050"),
                            CourseCode = "CENG 391",
                            CourseName = "Introduction to Image Understanding",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(580),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000051"),
                            CourseCode = "CENG 421",
                            CourseName = "Computer Network Programming",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(590),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000052"),
                            CourseCode = "CENG 422",
                            CourseName = "Computer Network Design and Management",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(590),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000053"),
                            CourseCode = "CENG 431",
                            CourseName = "Software Systems Development",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(590),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000054"),
                            CourseCode = "CENG 432",
                            CourseName = "Fundamentals of Enterprise Application Development",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(590),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000055"),
                            CourseCode = "CENG 433",
                            CourseName = "Scalable Software Development for the Internet",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(600),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000056"),
                            CourseCode = "CENG 434",
                            CourseName = "Enterprise Application Integrations",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(600),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000057"),
                            CourseCode = "CENG 435",
                            CourseName = "Database Management System Design and Implementation",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(600),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000058"),
                            CourseCode = "CENG 436",
                            CourseName = "Distributed Information Management",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(600),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000059"),
                            CourseCode = "CENG 437",
                            CourseName = "Software Quality Management",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(610),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000060"),
                            CourseCode = "CENG 441",
                            CourseName = "Introduction to Parallel Programming",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(610),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000061"),
                            CourseCode = "CENG 442",
                            CourseName = "Multi-Core Architectures and Operating Systems",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(620),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000062"),
                            CourseCode = "CENG 443",
                            CourseName = "Heterogeneous Parallel Programming",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(620),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000063"),
                            CourseCode = "CENG 444",
                            CourseName = "Parallel Programming Patterns",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(620),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000064"),
                            CourseCode = "CENG 451",
                            CourseName = "Advanced Digital System Design",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(620),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000065"),
                            CourseCode = "CENG 452",
                            CourseName = "Software Development for Embedded Systems",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(630),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000066"),
                            CourseCode = "CENG 461",
                            CourseName = "Artificial Intelligence",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(630),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000067"),
                            CourseCode = "CENG 462",
                            CourseName = "Soft Computing",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(630),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000068"),
                            CourseCode = "CENG 463",
                            CourseName = "Introduction to Machine Learning",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(640),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000069"),
                            CourseCode = "CENG 464",
                            CourseName = "Text Mining",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(640),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000070"),
                            CourseCode = "CENG 465",
                            CourseName = "Principles of Data-Intensive Systems",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(640),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000071"),
                            CourseCode = "CENG 471",
                            CourseName = "Cryptography",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(640),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000072"),
                            CourseCode = "CENG 472",
                            CourseName = "Computer Network Security",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(650),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000073"),
                            CourseCode = "CENG 473",
                            CourseName = "Information and Communication Technologies Security",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(650),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000074"),
                            CourseCode = "CENG 481",
                            CourseName = "Theoretical Approaches in Computer Science",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(650),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000075"),
                            CourseCode = "CENG 482",
                            CourseName = "Evolutionary Computation",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(650),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000076"),
                            CourseCode = "CENG 483",
                            CourseName = "Behavioral Robotics",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(660),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000077"),
                            CourseCode = "CENG 484",
                            CourseName = "Data Mining",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(660),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000078"),
                            CourseCode = "CENG 485",
                            CourseName = "Entrepreneurship in Information Technologies",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(660),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000079"),
                            CourseCode = "CENG 486",
                            CourseName = "Entrepreneurship for Smart Businesses",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(660),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000080"),
                            CourseCode = "CENG 487",
                            CourseName = "Introduction to Computer Graphics",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(670),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000081"),
                            CourseCode = "CENG 488",
                            CourseName = "Computer Graphics",
                            CourseType = 2,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(670),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000082"),
                            CourseCode = "ART 201",
                            CourseName = "Drawing-Sketch",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(670),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000083"),
                            CourseCode = "ART 202",
                            CourseName = "Painting",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(670),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000084"),
                            CourseCode = "ART 203",
                            CourseName = "Sculpture",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(680),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000085"),
                            CourseCode = "ART 204",
                            CourseName = "Artistic Ceramics",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(680),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000086"),
                            CourseCode = "ART 205",
                            CourseName = "Color Photography",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(680),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000087"),
                            CourseCode = "ART 206",
                            CourseName = "Introduction to Sound Production and Design",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(680),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000088"),
                            CourseCode = "ART 210",
                            CourseName = "Western Music and Aesthetics",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(690),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000089"),
                            CourseCode = "ART 211",
                            CourseName = "Music Workshop",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(690),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000090"),
                            CourseCode = "ART 212",
                            CourseName = "Introduction to Harmony",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(690),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000091"),
                            CourseCode = "ART 230",
                            CourseName = "Dance Education",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(700),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000092"),
                            CourseCode = "ART 231",
                            CourseName = "Traditional Folk Dances I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(710),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000093"),
                            CourseCode = "ART 232",
                            CourseName = "Traditional Folk Dances II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(710),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000094"),
                            CourseCode = "CHN 201",
                            CourseName = "Basic Chinese I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(710),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000095"),
                            CourseCode = "FREN 201",
                            CourseName = "Basic French I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(710),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000096"),
                            CourseCode = "FREN 202",
                            CourseName = "Basic French II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(720),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000097"),
                            CourseCode = "FREN 203",
                            CourseName = "Intermediate French I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(720),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000098"),
                            CourseCode = "GER 201",
                            CourseName = "Basic German I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(720),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000099"),
                            CourseCode = "GER 202",
                            CourseName = "Basic German II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(720),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000100"),
                            CourseCode = "GER 203",
                            CourseName = "Intermediate German I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(730),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000101"),
                            CourseCode = "GER 204",
                            CourseName = "Intermediate German II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(730),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000102"),
                            CourseCode = "HUM 203",
                            CourseName = "Introduction to Social Anthropology",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(730),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000103"),
                            CourseCode = "HUM 205",
                            CourseName = "Current Issues in Turkish Language",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(730),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000104"),
                            CourseCode = "HUM 206",
                            CourseName = "Comparative Cultures",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(740),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000105"),
                            CourseCode = "HUM 207",
                            CourseName = "Ottoman History I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(740),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000106"),
                            CourseCode = "HUM 208",
                            CourseName = "Ottoman History II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(740),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000107"),
                            CourseCode = "HUM 211",
                            CourseName = "Introduction to Russian Culture",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(740),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000108"),
                            CourseCode = "HUM 213",
                            CourseName = "History of Western Civilizations I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(750),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000109"),
                            CourseCode = "HUM 214",
                            CourseName = "History of Western Civilizations II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(750),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000110"),
                            CourseCode = "HUM 215",
                            CourseName = "Mythology",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(750),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000111"),
                            CourseCode = "HUM 216",
                            CourseName = "Analysis of Folklore Texts",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(750),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000112"),
                            CourseCode = "HUM 217",
                            CourseName = "Art History I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(760),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000113"),
                            CourseCode = "HUM 218",
                            CourseName = "Art History II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(760),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000114"),
                            CourseCode = "HUM 219",
                            CourseName = "Art History III",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(760),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000115"),
                            CourseCode = "HUM 220",
                            CourseName = "Introduction to Japanese Culture",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(760),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000116"),
                            CourseCode = "HUM 223",
                            CourseName = "Introduction to French Culture",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(770),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000117"),
                            CourseCode = "HUM 226",
                            CourseName = "Textual Analysis of Contemporary Turkish Literature",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(770),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000118"),
                            CourseCode = "HUM 227",
                            CourseName = "Turkish Language Reform",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(770),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000119"),
                            CourseCode = "HUM 230",
                            CourseName = "Group Dynamics",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(770),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000120"),
                            CourseCode = "HUM 231",
                            CourseName = "Sociology of Work",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(780),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000121"),
                            CourseCode = "HUM 232",
                            CourseName = "Visual Communication Symbols in Art and Daily Life",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(780),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000122"),
                            CourseCode = "HUM 233",
                            CourseName = "Visual Perception in Art",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(790),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000123"),
                            CourseCode = "HUM 240",
                            CourseName = "Introduction to Spanish Culture",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(790),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000124"),
                            CourseCode = "HUM 251",
                            CourseName = "Ottoman Turkish I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(800),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000125"),
                            CourseCode = "HUM 252",
                            CourseName = "Ottoman Turkish II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(800),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000126"),
                            CourseCode = "HUM 255",
                            CourseName = "Latin I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(800),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000127"),
                            CourseCode = "HUM 256",
                            CourseName = "Latin II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(800),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000128"),
                            CourseCode = "JAP 201",
                            CourseName = "Basic Japanese I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(810),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000129"),
                            CourseCode = "JAP 202",
                            CourseName = "Basic Japanese II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(810),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000130"),
                            CourseCode = "JAP 203",
                            CourseName = "Intermediate Japanese I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(810),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000131"),
                            CourseCode = "MAN 203",
                            CourseName = "Project Management",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(810),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000132"),
                            CourseCode = "MAN 205",
                            CourseName = "Innovation Management",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(820),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000133"),
                            CourseCode = "MAN 206",
                            CourseName = "Businesses and Business Life",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(820),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000134"),
                            CourseCode = "MAN 210",
                            CourseName = "Corporate Communication and Management Skills",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(820),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000135"),
                            CourseCode = "MAN 211",
                            CourseName = "Communication and Management Skills for Engineers",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(820),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000136"),
                            CourseCode = "MAN 215",
                            CourseName = "Engineering Economy",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(830),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000137"),
                            CourseCode = "MAN 216",
                            CourseName = "Introduction to Marketing",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(830),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000138"),
                            CourseCode = "MAN 217",
                            CourseName = "Fundamentals of Management",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(830),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000139"),
                            CourseCode = "MAN 218",
                            CourseName = "Entrepreneurship",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(830),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000140"),
                            CourseCode = "MAN 220",
                            CourseName = "Leadership",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(840),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000141"),
                            CourseCode = "MAN 221",
                            CourseName = "Organizational and Personal Career Management",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(840),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000142"),
                            CourseCode = "MAN 230",
                            CourseName = "Law in Business Life",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(840),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000143"),
                            CourseCode = "MAN 231",
                            CourseName = "Intellectual and Industrial Property Law",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(840),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000144"),
                            CourseCode = "RUS 201",
                            CourseName = "Basic Russian I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(840),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000145"),
                            CourseCode = "RUS 202",
                            CourseName = "Basic Russian II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(850),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000146"),
                            CourseCode = "RUS 203",
                            CourseName = "Intermediate Russian I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(850),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000147"),
                            CourseCode = "RUS 204",
                            CourseName = "Intermediate Russian II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(850),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000148"),
                            CourseCode = "RUS 205",
                            CourseName = "Advanced Russian I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(860),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000149"),
                            CourseCode = "RUS 206",
                            CourseName = "Advanced Russian II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(860),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000150"),
                            CourseCode = "SPAN 203",
                            CourseName = "Intermediate Spanish I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(860),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000151"),
                            CourseCode = "SPAN 204",
                            CourseName = "Intermediate Spanish II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(860),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000152"),
                            CourseCode = "SPRT 201",
                            CourseName = "Tennis I",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(870),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000153"),
                            CourseCode = "SPRT 202",
                            CourseName = "Tennis II",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(870),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000154"),
                            CourseCode = "SPRT 203",
                            CourseName = "Badminton",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(870),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000155"),
                            CourseCode = "SPRT 204",
                            CourseName = "Basketball",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(870),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000156"),
                            CourseCode = "SPRT 206",
                            CourseName = "Table Tennis",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(880),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000157"),
                            CourseCode = "SPRT 208",
                            CourseName = "Basic Fitness Techniques",
                            CourseType = 3,
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(880),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            Ects = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.CourseTaken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CourseCodeInTranscript")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CourseCodeInTranscript");

                    b.Property<string>("CourseNameInTranscript")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CourseNameInTranscript");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("CreditsEarned")
                        .HasColumnType("integer")
                        .HasColumnName("CreditsEarned");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Grade");

                    b.Property<bool>("IsSuccessfullyCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSuccessfullyCompleted");

                    b.Property<Guid?>("MatchedCourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("MatchedCourseId");

                    b.Property<string>("SemesterTaken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SemesterTaken");

                    b.Property<Guid>("StudentUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentUserId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MatchedCourseId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("CourseTakens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("FacultyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9760),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Computer Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9760),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Electrical-Electronics Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9770),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Mechanical Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9770),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Civil Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9770),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Environmental Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9770),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Chemical Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9770),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Food Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9770),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Materials Science and Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9780),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Bioengineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9780),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Energy Systems Engineering"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9780),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Photonics"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9780),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "Physics"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9790),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9790),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9790),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "Molecular Biology and Genetics"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9790),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Architecture"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9790),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Urban and Regional Planning"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9790),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Industrial Design"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9800),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Name = "Foreign Languages"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9800),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Name = "General Culture Courses"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EligibilityCheckResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ActualValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ActualValue");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CheckDate");

                    b.Property<int>("CheckType")
                        .HasColumnType("integer")
                        .HasColumnName("CheckType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("GraduationProcessId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMet")
                        .HasColumnType("boolean")
                        .HasColumnName("IsMet");

                    b.Property<string>("NotesOrMissingItems")
                        .HasColumnType("text")
                        .HasColumnName("NotesOrMissingItems");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProcessId");

                    b.Property<string>("RequiredValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RequiredValue");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("GraduationProcessId");

                    b.ToTable("EligibilityCheckResults", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("text")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Faculties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9680),
                            Name = "Faculty of Engineering"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9720),
                            Name = "Faculty of Science"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9720),
                            Name = "Faculty of Architecture"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9720),
                            Name = "School of Foreign Languages"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 20, 1, 7, 54, 765, DateTimeKind.Utc).AddTicks(9730),
                            Name = "Faculty of General Studies"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSize");

                    b.Property<int>("FileType")
                        .HasColumnType("integer")
                        .HasColumnName("FileType");

                    b.Property<Guid?>("GraduationProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MimeType");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProcessId");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer")
                        .HasColumnName("StorageType");

                    b.Property<Guid?>("StudentUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentUserId");

                    b.Property<Guid?>("TranscriptDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UploadDate");

                    b.Property<Guid>("UploaderUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UploaderUserId");

                    b.HasKey("Id");

                    b.HasIndex("GraduationProcessId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("TranscriptDataId");

                    b.HasIndex("UploaderUserId");

                    b.ToTable("FileAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GraduationProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AcademicTerm")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AcademicTerm");

                    b.Property<DateTime?>("AdvisorReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AdvisorReviewDate");

                    b.Property<Guid?>("AdvisorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("AdvisorUserId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeansOfficeReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeansOfficeReviewDate");

                    b.Property<Guid?>("DeansOfficeUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeansOfficeUserId");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("DeptSecretaryReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeptSecretaryReviewDate");

                    b.Property<Guid?>("DeptSecretaryUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("DeptSecretaryUserId");

                    b.Property<DateTime>("InitiationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("InitiationDate");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdateDate");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("Notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("StudentAffairsReviewDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StudentAffairsReviewDate");

                    b.Property<Guid?>("StudentAffairsUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentAffairsUserId");

                    b.Property<Guid>("StudentUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentUserId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorUserId");

                    b.HasIndex("DeansOfficeUserId");

                    b.HasIndex("DeptSecretaryUserId");

                    b.HasIndex("StudentAffairsUserId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("GraduationProcesses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GraduationRequirementSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AcademicTerm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("DepartmentId");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<Guid>("LastModifiedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedByUserId");

                    b.Property<decimal>("MinGpa")
                        .HasColumnType("numeric")
                        .HasColumnName("MinGpa");

                    b.Property<int?>("MinNonTechnicalElectiveCoursesCount")
                        .HasColumnType("integer")
                        .HasColumnName("MinNonTechnicalElectiveCoursesCount");

                    b.Property<int?>("MinTechnicalElectiveCoursesCount")
                        .HasColumnType("integer")
                        .HasColumnName("MinTechnicalElectiveCoursesCount");

                    b.Property<int?>("MinUniversityElectiveCoursesCount")
                        .HasColumnType("integer")
                        .HasColumnName("MinUniversityElectiveCoursesCount");

                    b.Property<int>("TotalMinEcts")
                        .HasColumnType("integer")
                        .HasColumnName("TotalMinEcts");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("GraduationRequirementSets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Body");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("ErrorMessage");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("From");

                    b.Property<bool>("IsBodyHtml")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBodyHtml");

                    b.Property<bool>("IsSentSuccessfully")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSentSuccessfully");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SentDate");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("To");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MailLogs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreationDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<Guid>("RecipientUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("RecipientUserId");

                    b.Property<Guid?>("RelatedProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("RelatedProcessId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("RelatedProcessId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "SYSTEM_ADMIN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "STUDENT_AFFAIRS_STAFF"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "ADVISOR"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "DEPARTMENT_SECRETARY"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "DEANS_OFFICE_STAFF"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RankingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AcademicTerm")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AcademicTerm");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("GeneratedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("GeneratedByUserId");

                    b.Property<DateTime>("GenerationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("GenerationDate");

                    b.Property<int>("ListType")
                        .HasColumnType("integer")
                        .HasColumnName("ListType");

                    b.Property<decimal?>("MinGpaForInclusion")
                        .HasColumnType("numeric")
                        .HasColumnName("MinGpaForInclusion");

                    b.Property<string>("PrimarySortField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PrimarySortField");

                    b.Property<Guid?>("ScopeDepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScopeDepartmentId");

                    b.Property<Guid?>("ScopeFacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScopeFacultyId");

                    b.Property<string>("SortOrder")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SortOrder");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedByUserId");

                    b.HasIndex("ScopeDepartmentId");

                    b.HasIndex("ScopeFacultyId");

                    b.ToTable("RankingLists", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RankingListCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("CriteriaName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CriteriaName");

                    b.Property<string>("CriteriaValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CriteriaValue");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("RankingListId")
                        .HasColumnType("uuid")
                        .HasColumnName("RankingListId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("RankingListId");

                    b.ToTable("RankingListCriterias", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RankingListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<decimal>("GpaAtRanking")
                        .HasColumnType("numeric")
                        .HasColumnName("GpaAtRanking");

                    b.Property<int>("HonourStatus")
                        .HasColumnType("integer")
                        .HasColumnName("HonourStatus");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("Rank");

                    b.Property<Guid>("RankingListId")
                        .HasColumnType("uuid")
                        .HasColumnName("RankingListId");

                    b.Property<Guid>("StudentUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentUserId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("RankingListId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("RankingListEntries", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiresDate");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RequirementMandatoryCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("CourseId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("GraduationRequirementSetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequirementSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("RequirementSetId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GraduationRequirementSetId");

                    b.ToTable("RequirementMandatoryCourses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("DepartmentId");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("FacultyId");

                    b.Property<string>("StaffIdentificationNumber")
                        .HasColumnType("text")
                        .HasColumnName("StaffIdentificationNumber");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Staffs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            StaffIdentificationNumber = "STAFF001",
                            Title = "Advisor"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000042"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000002"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            StaffIdentificationNumber = "STAFF002",
                            Title = "Advisor"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000043"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            StaffIdentificationNumber = "STAFF003",
                            Title = "Department Secretary"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000044"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            StaffIdentificationNumber = "STAFF004",
                            Title = "Dean's Office Staff"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000045"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000014"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000002"),
                            StaffIdentificationNumber = "STAFF005",
                            Title = "Advisor"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000046"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000012"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000002"),
                            StaffIdentificationNumber = "STAFF006",
                            Title = "Academic Staff"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000047"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000016"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000003"),
                            StaffIdentificationNumber = "STAFF007",
                            Title = "Advisor"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000048"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000019"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000004"),
                            StaffIdentificationNumber = "STAFF008",
                            Title = "Instructor"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000049"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000020"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000005"),
                            StaffIdentificationNumber = "STAFF009",
                            Title = "Coordinator"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            FacultyId = new Guid("10000000-0000-0000-0000-000000000001"),
                            StaffIdentificationNumber = "STAFF010",
                            Title = "Advisor"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AssignedAdvisorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("AssignedAdvisorUserId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<int?>("CurrentEctsCompleted")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentEctsCompleted");

                    b.Property<decimal?>("CurrentGpa")
                        .HasColumnType("numeric")
                        .HasColumnName("CurrentGpa");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("DepartmentId");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EnrollDate");

                    b.Property<int>("GraduationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("GraduationStatus");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ProgramName");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("StudentNumber");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAdvisorUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 3, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(220),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400001"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 4, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(240),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400002"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2020, 6, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(240),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400003"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000004"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 3, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(250),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400004"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000005"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(250),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400005"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000006"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2020, 12, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(250),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400006"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000007"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 12, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(260),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400007"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000008"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2020, 9, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(260),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400008"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000009"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 7, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(260),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400009"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000010"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2024, 2, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(260),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400010"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000011"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 9, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(270),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400011"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000012"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 11, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(270),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400012"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000013"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 6, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(270),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400013"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000014"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2024, 4, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(270),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400014"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000015"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2020, 10, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(270),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400015"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000016"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 10, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(280),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400016"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000017"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2024, 4, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(280),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400017"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000018"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2020, 12, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(280),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400018"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000019"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 2, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(280),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400019"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000020"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 7, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(290),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400020"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000021"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 11, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(290),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400021"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000022"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 2, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(290),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400022"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000023"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2024, 1, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(290),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400023"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000024"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 9, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(290),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400024"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000025"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2020, 9, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(300),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400025"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000026"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 3, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(300),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400026"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000027"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 3, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(300),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400027"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000028"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 10, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(300),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400028"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000029"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2020, 9, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(300),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400029"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000030"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 2, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(310),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400030"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000031"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 8, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(310),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400031"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000032"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 3, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(310),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400032"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000033"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 6, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(310),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400033"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000034"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 7, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(310),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400034"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000035"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2021, 11, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(320),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400035"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000036"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 2, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(320),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400036"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000037"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 12, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(320),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400037"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000038"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 5, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(330),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400038"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000039"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000041"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2022, 11, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(330),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400039"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000040"),
                            AssignedAdvisorUserId = new Guid("40000000-0000-0000-0000-000000000050"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("20000000-0000-0000-0000-000000000001"),
                            EnrollDate = new DateTime(2023, 3, 20, 1, 7, 54, 766, DateTimeKind.Utc).AddTicks(330),
                            GraduationStatus = 9,
                            ProgramName = "Undergraduate Program",
                            StudentNumber = "202400040"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TranscriptData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsValidForProcessing")
                        .HasColumnType("boolean")
                        .HasColumnName("IsValidForProcessing");

                    b.Property<int>("ParsedEcts")
                        .HasColumnType("integer")
                        .HasColumnName("ParsedEcts");

                    b.Property<decimal>("ParsedGpa")
                        .HasColumnType("numeric")
                        .HasColumnName("ParsedGpa");

                    b.Property<DateTime>("ParsingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ParsingDate");

                    b.Property<Guid>("StudentUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentUserId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("StudentUserId");

                    b.ToTable("TranscriptDatas", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("integer")
                        .HasColumnName("AuthenticatorType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-11111111111a"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "systemadmin@university.edu",
                            FirstName = "System",
                            IsActive = true,
                            IsEmailVerified = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 136, 186, 106, 177, 70, 145, 132, 157, 209, 109, 161, 205, 156, 178, 12, 86, 64, 175, 115, 193, 169, 181, 113, 126, 246, 159, 175, 186, 74, 62, 115, 216, 22, 60, 164, 212, 94, 131, 136, 206, 1, 72, 23, 175, 153, 252, 238, 107, 41, 178, 204, 139, 2, 5, 35, 42, 171, 208, 160, 43, 176, 34, 53, 39 },
                            PasswordSalt = new byte[] { 76, 133, 52, 231, 58, 102, 178, 93, 250, 82, 139, 187, 44, 50, 216, 148, 91, 118, 36, 228, 227, 158, 149, 219, 145, 219, 150, 88, 152, 5, 165, 140, 27, 240, 104, 47, 233, 211, 143, 111, 225, 20, 186, 59, 12, 229, 49, 107, 142, 169, 181, 245, 68, 216, 74, 99, 6, 74, 71, 148, 181, 25, 90, 244, 32, 73, 129, 8, 125, 97, 67, 92, 125, 246, 227, 40, 20, 143, 93, 3, 67, 185, 247, 159, 154, 181, 126, 176, 0, 184, 78, 73, 226, 19, 53, 109, 142, 174, 30, 227, 132, 141, 70, 223, 52, 31, 253, 175, 93, 176, 32, 128, 63, 69, 85, 107, 213, 73, 118, 198, 112, 166, 154, 188, 3, 197, 21, 66 },
                            PhoneNumber = "1112223344",
                            UserName = "systemadmin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-22222222222a"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "student@std.iyte.edu.tr",
                            FirstName = "Student",
                            IsActive = true,
                            IsEmailVerified = false,
                            LastName = "User",
                            PasswordHash = new byte[] { 18, 136, 238, 28, 195, 242, 32, 237, 226, 176, 2, 48, 67, 6, 232, 6, 104, 246, 227, 82, 230, 157, 57, 46, 245, 4, 47, 242, 60, 69, 104, 97, 111, 231, 162, 245, 61, 36, 240, 87, 178, 225, 231, 181, 124, 203, 247, 63, 182, 165, 70, 49, 36, 185, 173, 196, 15, 88, 77, 185, 151, 149, 236, 135 },
                            PasswordSalt = new byte[] { 255, 251, 89, 205, 38, 86, 64, 213, 223, 28, 53, 40, 140, 118, 213, 216, 213, 48, 46, 254, 245, 154, 40, 44, 130, 212, 12, 19, 46, 252, 235, 18, 41, 177, 94, 239, 189, 232, 5, 149, 171, 190, 180, 24, 175, 240, 207, 104, 33, 57, 251, 99, 20, 136, 155, 114, 17, 120, 145, 100, 41, 51, 96, 44, 175, 189, 30, 246, 203, 77, 180, 170, 216, 23, 184, 242, 244, 153, 28, 195, 131, 71, 171, 157, 108, 138, 44, 233, 112, 138, 159, 46, 153, 182, 210, 192, 208, 253, 77, 12, 97, 142, 246, 48, 167, 146, 130, 99, 45, 103, 45, 24, 97, 46, 145, 86, 148, 26, 13, 92, 191, 127, 212, 102, 25, 186, 179, 4 },
                            PhoneNumber = "2223334455",
                            UserName = "studentuser"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-33333333333a"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "studentaffairs@iyte.edu.tr",
                            FirstName = "StudentAffairs",
                            IsActive = true,
                            IsEmailVerified = false,
                            LastName = "Staff",
                            PasswordHash = new byte[] { 243, 210, 114, 148, 192, 71, 191, 85, 118, 58, 252, 120, 47, 215, 193, 36, 52, 74, 181, 17, 17, 171, 28, 194, 125, 246, 33, 229, 208, 153, 50, 14, 28, 179, 158, 105, 83, 75, 227, 75, 84, 163, 152, 55, 5, 160, 46, 182, 96, 254, 151, 66, 183, 106, 161, 181, 148, 230, 147, 178, 194, 103, 50, 131 },
                            PasswordSalt = new byte[] { 110, 113, 202, 2, 113, 52, 138, 41, 130, 178, 203, 161, 248, 198, 179, 25, 213, 100, 10, 120, 133, 72, 50, 48, 183, 151, 223, 58, 83, 53, 31, 178, 179, 105, 18, 238, 160, 155, 103, 2, 147, 136, 63, 0, 133, 129, 130, 236, 152, 232, 58, 46, 51, 97, 196, 101, 95, 48, 10, 97, 85, 12, 226, 152, 84, 222, 137, 247, 199, 115, 220, 115, 122, 81, 223, 17, 198, 79, 235, 75, 233, 71, 247, 183, 140, 52, 130, 134, 175, 53, 110, 211, 76, 181, 212, 97, 97, 205, 190, 53, 39, 229, 235, 29, 17, 131, 33, 247, 72, 36, 158, 242, 124, 19, 38, 181, 21, 34, 42, 135, 37, 76, 153, 142, 71, 74, 43, 74 },
                            PhoneNumber = "3334445566",
                            UserName = "studentaffairs"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-44444444444a"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "advisor@iyte.edu.tr",
                            FirstName = "Advisor",
                            IsActive = true,
                            IsEmailVerified = false,
                            LastName = "User",
                            PasswordHash = new byte[] { 215, 173, 110, 12, 143, 187, 97, 118, 94, 92, 206, 77, 237, 47, 184, 212, 182, 189, 199, 248, 168, 107, 66, 141, 227, 36, 128, 236, 60, 120, 116, 3, 3, 169, 7, 117, 20, 35, 78, 54, 51, 242, 63, 18, 94, 43, 198, 20, 9, 11, 162, 207, 84, 107, 225, 179, 197, 213, 171, 167, 94, 99, 105, 240 },
                            PasswordSalt = new byte[] { 193, 17, 255, 64, 6, 65, 212, 38, 164, 134, 209, 88, 128, 136, 0, 49, 195, 187, 104, 13, 32, 211, 74, 26, 224, 50, 223, 29, 76, 182, 222, 27, 119, 220, 20, 114, 219, 187, 199, 43, 26, 97, 192, 200, 139, 138, 211, 160, 156, 121, 87, 228, 255, 158, 182, 204, 89, 151, 227, 30, 127, 134, 210, 18, 141, 138, 163, 53, 79, 231, 65, 209, 250, 155, 183, 245, 133, 16, 212, 27, 76, 22, 3, 87, 19, 86, 221, 246, 131, 58, 102, 237, 203, 245, 28, 109, 46, 211, 6, 93, 170, 25, 154, 184, 236, 41, 216, 28, 147, 199, 232, 251, 169, 41, 213, 153, 170, 79, 212, 157, 126, 143, 81, 192, 30, 123, 197, 230 },
                            PhoneNumber = "4445556677",
                            UserName = "advisoruser"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-55555555555a"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "deptsecretary@iyte.edu.tr",
                            FirstName = "Department",
                            IsActive = true,
                            IsEmailVerified = false,
                            LastName = "Secretary",
                            PasswordHash = new byte[] { 95, 22, 3, 207, 195, 103, 13, 79, 188, 198, 43, 139, 173, 19, 8, 48, 198, 252, 90, 214, 72, 243, 150, 55, 146, 203, 97, 89, 117, 229, 6, 68, 223, 182, 138, 170, 103, 190, 183, 84, 186, 123, 86, 98, 103, 203, 83, 55, 193, 164, 212, 114, 208, 241, 55, 131, 243, 220, 6, 46, 122, 125, 77, 171 },
                            PasswordSalt = new byte[] { 128, 62, 134, 219, 139, 8, 20, 129, 10, 245, 38, 1, 21, 237, 202, 62, 54, 35, 89, 0, 159, 122, 0, 114, 49, 99, 211, 113, 11, 216, 57, 186, 212, 0, 7, 177, 81, 252, 222, 82, 239, 175, 19, 141, 54, 65, 156, 98, 92, 249, 254, 185, 111, 136, 216, 233, 70, 49, 143, 26, 126, 225, 66, 28, 9, 180, 67, 39, 227, 59, 50, 36, 239, 232, 65, 144, 229, 31, 70, 180, 18, 22, 204, 77, 175, 212, 232, 133, 23, 146, 190, 159, 77, 190, 194, 37, 212, 239, 155, 247, 199, 157, 196, 177, 62, 157, 249, 33, 123, 55, 148, 193, 178, 34, 166, 236, 93, 17, 115, 97, 94, 187, 173, 50, 145, 213, 160, 220 },
                            PhoneNumber = "5556667788",
                            UserName = "deptsecretary"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-66666666666a"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "deansoffice@iyte.edu.tr",
                            FirstName = "DeansOffice",
                            IsActive = true,
                            IsEmailVerified = false,
                            LastName = "Staff",
                            PasswordHash = new byte[] { 196, 122, 182, 104, 170, 196, 76, 25, 192, 211, 188, 139, 37, 30, 57, 153, 33, 34, 209, 47, 166, 29, 44, 136, 180, 149, 200, 39, 81, 107, 243, 167, 152, 16, 84, 178, 92, 73, 77, 174, 19, 132, 225, 165, 181, 204, 47, 179, 245, 168, 196, 15, 202, 121, 171, 17, 65, 137, 80, 83, 29, 199, 176, 85 },
                            PasswordSalt = new byte[] { 149, 150, 49, 101, 59, 143, 92, 184, 57, 177, 28, 245, 97, 176, 56, 172, 24, 217, 149, 139, 10, 209, 83, 125, 145, 251, 195, 220, 71, 214, 19, 244, 136, 125, 6, 17, 125, 91, 71, 54, 22, 181, 116, 119, 254, 114, 160, 76, 71, 178, 167, 208, 119, 190, 248, 161, 168, 243, 40, 51, 16, 137, 179, 131, 18, 250, 100, 53, 165, 168, 72, 250, 11, 81, 89, 75, 68, 24, 254, 209, 13, 183, 235, 3, 193, 187, 195, 131, 223, 25, 229, 133, 19, 108, 36, 73, 241, 135, 219, 217, 232, 33, 158, 207, 43, 63, 109, 56, 90, 68, 195, 197, 154, 159, 177, 176, 38, 203, 232, 125, 109, 210, 159, 89, 191, 25, 46, 43 },
                            PhoneNumber = "6667778899",
                            UserName = "deansoffice"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "deniz.yildiz.s1@std.iyte.edu.tr",
                            FirstName = "Deniz",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "deniz.yildiz.s1"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "burak.yilmaz.s2@std.iyte.edu.tr",
                            FirstName = "Burak",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "burak.yilmaz.s2"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "deniz.yilmaz.s3@std.iyte.edu.tr",
                            FirstName = "Deniz",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "deniz.yilmaz.s3"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000004"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "can.yilmaz.s4@std.iyte.edu.tr",
                            FirstName = "Can",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "can.yilmaz.s4"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000005"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "gamze.sahin.s5@std.iyte.edu.tr",
                            FirstName = "Gamze",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Şahin",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "gamze.sahin.s5"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000006"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mustafa.sahin.s6@std.iyte.edu.tr",
                            FirstName = "Mustafa",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Şahin",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "mustafa.sahin.s6"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000007"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "elif.sahin.s7@std.iyte.edu.tr",
                            FirstName = "Elif",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Şahin",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "elif.sahin.s7"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000008"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mehmet.ozturk.s8@std.iyte.edu.tr",
                            FirstName = "Mehmet",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "mehmet.ozturk.s8"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000009"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "zeynep.demir.s9@std.iyte.edu.tr",
                            FirstName = "Zeynep",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Demir",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "zeynep.demir.s9"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000010"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mehmet.yilmaz.s10@std.iyte.edu.tr",
                            FirstName = "Mehmet",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "mehmet.yilmaz.s10"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000011"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ayse.ozturk.s11@std.iyte.edu.tr",
                            FirstName = "Ayşe",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ayse.ozturk.s11"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000012"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "can.arslan.s12@std.iyte.edu.tr",
                            FirstName = "Can",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "can.arslan.s12"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000013"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ayse.sahin.s13@std.iyte.edu.tr",
                            FirstName = "Ayşe",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Şahin",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ayse.sahin.s13"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000014"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmet.kaya.s14@std.iyte.edu.tr",
                            FirstName = "Ahmet",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ahmet.kaya.s14"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000015"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "gamze.kaya.s15@std.iyte.edu.tr",
                            FirstName = "Gamze",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "gamze.kaya.s15"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000016"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmet.yildiz.s16@std.iyte.edu.tr",
                            FirstName = "Ahmet",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ahmet.yildiz.s16"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000017"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "gamze.dogan.s17@std.iyte.edu.tr",
                            FirstName = "Gamze",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Doğan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "gamze.dogan.s17"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000018"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "murat.arslan.s18@std.iyte.edu.tr",
                            FirstName = "Murat",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "murat.arslan.s18"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000019"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "selin.yildiz.s19@std.iyte.edu.tr",
                            FirstName = "Selin",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "selin.yildiz.s19"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000020"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "burak.kaya.s20@std.iyte.edu.tr",
                            FirstName = "Burak",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "burak.kaya.s20"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000021"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "fatma.sahin.s21@std.iyte.edu.tr",
                            FirstName = "Fatma",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Şahin",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "fatma.sahin.s21"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000022"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "can.yilmaz.s22@std.iyte.edu.tr",
                            FirstName = "Can",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "can.yilmaz.s22"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000023"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "merve.yildiz.s23@std.iyte.edu.tr",
                            FirstName = "Merve",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "merve.yildiz.s23"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000024"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "burak.arslan.s24@std.iyte.edu.tr",
                            FirstName = "Burak",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "burak.arslan.s24"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000025"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hatice.yilmaz.s25@std.iyte.edu.tr",
                            FirstName = "Hatice",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "hatice.yilmaz.s25"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000026"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "huseyin.dogan.s26@std.iyte.edu.tr",
                            FirstName = "Hüseyin",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Doğan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "huseyin.dogan.s26"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000027"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ebru.kaya.s27@std.iyte.edu.tr",
                            FirstName = "Ebru",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Kaya",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ebru.kaya.s27"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000028"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmet.arslan.s28@std.iyte.edu.tr",
                            FirstName = "Ahmet",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ahmet.arslan.s28"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000029"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ebru.arslan.s29@std.iyte.edu.tr",
                            FirstName = "Ebru",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ebru.arslan.s29"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000030"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmet.ozturk.s30@std.iyte.edu.tr",
                            FirstName = "Ahmet",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ahmet.ozturk.s30"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000031"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "selin.dogan.s31@std.iyte.edu.tr",
                            FirstName = "Selin",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Doğan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "selin.dogan.s31"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000032"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "veli.demir.s32@std.iyte.edu.tr",
                            FirstName = "Veli",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Demir",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "veli.demir.s32"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000033"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "deniz.arslan.s33@std.iyte.edu.tr",
                            FirstName = "Deniz",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "deniz.arslan.s33"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000034"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ali.aydin.s34@std.iyte.edu.tr",
                            FirstName = "Ali",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Aydın",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ali.aydin.s34"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000035"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ebru.yilmaz.s35@std.iyte.edu.tr",
                            FirstName = "Ebru",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ebru.yilmaz.s35"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000036"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mustafa.dogan.s36@std.iyte.edu.tr",
                            FirstName = "Mustafa",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Doğan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "mustafa.dogan.s36"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000037"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "fatma.arslan.s37@std.iyte.edu.tr",
                            FirstName = "Fatma",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "fatma.arslan.s37"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000038"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "veli.ozturk.s38@std.iyte.edu.tr",
                            FirstName = "Veli",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "veli.ozturk.s38"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000039"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ebru.ozturk.s39@std.iyte.edu.tr",
                            FirstName = "Ebru",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ebru.ozturk.s39"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000040"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mehmet.yildiz.s40@std.iyte.edu.tr",
                            FirstName = "Mehmet",
                            IsActive = false,
                            IsEmailVerified = false,
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "mehmet.yildiz.s40"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000041"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ayse.yilmaz.p1@iyte.edu.tr",
                            FirstName = "Ayşe",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ayse.yilmaz.p1"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000042"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mehmet.kaya.p2@iyte.edu.tr",
                            FirstName = "Mehmet",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Kaya",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "mehmet.kaya.p2"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000043"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "zeynep.demir.p3@iyte.edu.tr",
                            FirstName = "Zeynep",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Demir",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "zeynep.demir.p3"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000044"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmet.celik.p4@iyte.edu.tr",
                            FirstName = "Ahmet",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Çelik",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ahmet.celik.p4"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000045"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mustafa.sahin.p5@iyte.edu.tr",
                            FirstName = "Mustafa",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Şahin",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "mustafa.sahin.p5"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000046"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "fatma.ozturk.p6@iyte.edu.tr",
                            FirstName = "Fatma",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "fatma.ozturk.p6"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000047"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ali.yildiz.p7@iyte.edu.tr",
                            FirstName = "Ali",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "ali.yildiz.p7"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000048"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "huseyin.aydin.p8@iyte.edu.tr",
                            FirstName = "Hüseyin",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Aydın",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "huseyin.aydin.p8"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000049"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "elif.arslan.p9@iyte.edu.tr",
                            FirstName = "Elif",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "elif.arslan.p9"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000050"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "veli.dogan.p10@iyte.edu.tr",
                            FirstName = "Veli",
                            IsActive = true,
                            IsEmailVerified = true,
                            LastName = "Doğan",
                            PasswordHash = new byte[] { 161, 97, 252, 217, 237, 233, 217, 241, 64, 57, 71, 62, 37, 23, 194, 22, 229, 131, 225, 58, 170, 243, 45, 43, 186, 204, 250, 250, 54, 251, 145, 235, 242, 83, 126, 108, 252, 44, 105, 172, 17, 160, 164, 246, 224, 224, 213, 146, 112, 22, 157, 99, 212, 39, 226, 25, 158, 8, 238, 113, 116, 70, 87, 28, 208, 180, 90, 41, 121, 66, 84, 204, 233, 175, 131, 100, 243, 55, 152, 9, 247, 206, 81, 182, 231, 255, 165, 56, 38, 26, 101, 76, 137, 120, 150, 158, 122, 157, 151, 233, 64, 114, 119, 14, 63, 133, 235, 220, 148, 159, 68, 163, 43, 225, 13, 233, 23, 72, 251, 226, 24, 81, 94, 107, 117, 205, 172, 40 },
                            PasswordSalt = new byte[] { 238, 253, 149, 95, 122, 60, 125, 3, 53, 4, 90, 155, 34, 254, 92, 159, 32, 36, 53, 153, 251, 227, 80, 187, 42, 69, 228, 68, 109, 126, 148, 67, 61, 91, 236, 131, 103, 164, 241, 8, 218, 181, 27, 150, 130, 89, 111, 240, 63, 252, 61, 229, 28, 191, 250, 217, 102, 80, 168, 93, 254, 110, 148, 66 },
                            UserName = "veli.dogan.p10"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("11111111-1111-1111-1111-11111111111a")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("22222222-2222-2222-2222-22222222222a")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("33333333-3333-3333-3333-33333333333a")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("44444444-4444-4444-4444-44444444444a")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserId = new Guid("55555555-5555-5555-5555-55555555555a")
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000006"),
                            UserId = new Guid("66666666-6666-6666-6666-66666666666a")
                        },
                        new
                        {
                            Id = new Guid("f3b0a4e9-7d63-4e47-9126-e110a63c8452"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8330),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("507f6bfa-41c8-48bc-8077-f97f7c7693a8"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8340),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("9895d1bb-843c-470b-9079-027dbe9117ef"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8340),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("84ce215c-a7eb-444b-aae5-f88799283415"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8350),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("8024852d-978a-4162-92aa-c9494e23810a"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8350),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("a96d6c73-e60f-425f-88f3-1ea63e546612"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8360),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("5af8227b-3d31-4550-a9ae-78a2f6de36c7"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8360),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("170e462e-3985-4299-bced-d03398253873"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8360),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("beaf93e7-663b-4a5a-91cf-254bffc22ee4"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8370),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("dc2fc4cf-d7e1-4e26-9e22-782d324d8bb2"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8370),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("52862d72-b448-4f2c-8536-5c55cc30dfe4"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8380),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("d341b685-eb32-4000-b995-9e1d6ea91cfc"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8380),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            Id = new Guid("f306716d-4a2b-496c-abd0-22ea92abe2c3"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8380),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            Id = new Guid("5a1f2dba-eb34-4618-a72b-8491b52be260"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8390),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000014")
                        },
                        new
                        {
                            Id = new Guid("f28d6590-33ad-44b0-abcc-7bb39929fb56"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8390),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000015")
                        },
                        new
                        {
                            Id = new Guid("d108ad7d-32e4-4809-b00c-9815fec6eef5"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8400),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000016")
                        },
                        new
                        {
                            Id = new Guid("f2332c0d-da16-4b3d-b44e-5cfa9eca48d2"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8410),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000017")
                        },
                        new
                        {
                            Id = new Guid("516e806d-a825-41a2-964b-7936033e55c8"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8410),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000018")
                        },
                        new
                        {
                            Id = new Guid("2637708c-d903-4366-9d04-8aac73a76e75"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8410),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000019")
                        },
                        new
                        {
                            Id = new Guid("aa4bf9c0-3bad-4f1e-895b-e6cf1ca859a3"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8420),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000020")
                        },
                        new
                        {
                            Id = new Guid("a81f0530-1abc-4c15-ae6f-d25b5f9cd556"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8420),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000021")
                        },
                        new
                        {
                            Id = new Guid("a779a150-000b-4f23-92c5-fc743ed5bfaf"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8430),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000022")
                        },
                        new
                        {
                            Id = new Guid("653e902e-6622-491a-82d4-63405eb87d3b"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8430),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000023")
                        },
                        new
                        {
                            Id = new Guid("063965a6-6096-4c63-8fbf-3d390213c979"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8430),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000024")
                        },
                        new
                        {
                            Id = new Guid("cd43eaf1-9da1-48fc-855c-6de480c0fd6f"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8440),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000025")
                        },
                        new
                        {
                            Id = new Guid("4c1eba27-5930-480b-b177-d097d3683c6d"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8440),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000026")
                        },
                        new
                        {
                            Id = new Guid("2fa1a8be-b401-4480-9c50-2a1195c235b5"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8440),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000027")
                        },
                        new
                        {
                            Id = new Guid("d423c6a0-74f0-4cbd-901c-2d5c69c7416b"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8450),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000028")
                        },
                        new
                        {
                            Id = new Guid("9acd8a5a-0d20-46e7-bac8-e22ed05c629f"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8450),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000029")
                        },
                        new
                        {
                            Id = new Guid("cf487a0a-38cc-4e57-80ae-935dc706d5c5"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8460),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000030")
                        },
                        new
                        {
                            Id = new Guid("dbb2d56e-5b2b-4118-bdcd-b3de415e0250"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8460),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000031")
                        },
                        new
                        {
                            Id = new Guid("c6e77136-78d1-43df-b0e2-140290c919ae"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8470),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000032")
                        },
                        new
                        {
                            Id = new Guid("c30ebe8f-3751-41c3-a8be-f0db79a27296"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8470),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000033")
                        },
                        new
                        {
                            Id = new Guid("dfa5f693-b165-4f98-9157-43b60871f0ed"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8470),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000034")
                        },
                        new
                        {
                            Id = new Guid("4119f062-bf52-4afc-8d88-66ed12ca18f7"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8480),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000035")
                        },
                        new
                        {
                            Id = new Guid("9b1c534d-1795-4648-9809-01298b792dcb"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8480),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000036")
                        },
                        new
                        {
                            Id = new Guid("c6e28d9f-51b4-45ab-a639-15327556c831"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8480),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000037")
                        },
                        new
                        {
                            Id = new Guid("55e10782-c423-4153-a640-d31bca6890a0"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8490),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000038")
                        },
                        new
                        {
                            Id = new Guid("5ab52e5b-407c-436d-898e-16f576fd1c08"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8490),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000039")
                        },
                        new
                        {
                            Id = new Guid("98eb5f08-1906-4359-8ecc-b2287ed44274"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8500),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000040")
                        },
                        new
                        {
                            Id = new Guid("62d79583-6cf5-4ee2-96f8-27487c9857d5"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8500),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000041")
                        },
                        new
                        {
                            Id = new Guid("80e25c23-4339-48b0-b922-818fcf6310a6"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8500),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000042")
                        },
                        new
                        {
                            Id = new Guid("1dfeb8cb-5462-4016-b030-82f7afcc328e"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8510),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000043")
                        },
                        new
                        {
                            Id = new Guid("57ff712f-dee7-4462-ba9e-b4afe2139e05"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8510),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000006"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000044")
                        },
                        new
                        {
                            Id = new Guid("95de6c49-d41a-459a-b6cf-095b2098800b"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8510),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000045")
                        },
                        new
                        {
                            Id = new Guid("314e98ef-c411-4a59-b514-8736d39ad7cd"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8520),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000046")
                        },
                        new
                        {
                            Id = new Guid("ccf3f6f7-8963-4da8-a270-4781656f19a3"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8520),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000047")
                        },
                        new
                        {
                            Id = new Guid("2719c4f1-a063-41e4-8edf-59b76636c0e3"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8520),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000048")
                        },
                        new
                        {
                            Id = new Guid("f9e8a480-0e73-4da9-82f5-e4b3417d96dc"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8530),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000049")
                        },
                        new
                        {
                            Id = new Guid("8481bb18-200f-4f7d-8c11-9676d3faaa68"),
                            CreatedDate = new DateTime(2025, 5, 19, 22, 7, 54, 765, DateTimeKind.Utc).AddTicks(8530),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("40000000-0000-0000-0000-000000000050")
                        });
                });

            modelBuilder.Entity("Domain.Entities.ValidationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpireDate");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("IsUsed");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<int>("ValidationType")
                        .HasColumnType("integer")
                        .HasColumnName("ValidationType");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ValidationCodes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.CourseTaken", b =>
                {
                    b.HasOne("Domain.Entities.Course", "MatchedCourse")
                        .WithMany("CourseTakens")
                        .HasForeignKey("MatchedCourseId");

                    b.HasOne("Domain.Entities.User", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchedCourse");

                    b.Navigation("StudentUser");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Domain.Entities.EligibilityCheckResult", b =>
                {
                    b.HasOne("Domain.Entities.GraduationProcess", "GraduationProcess")
                        .WithMany("EligibilityCheckResults")
                        .HasForeignKey("GraduationProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GraduationProcess");
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.HasOne("Domain.Entities.GraduationProcess", "GraduationProcess")
                        .WithMany("FileAttachments")
                        .HasForeignKey("GraduationProcessId");

                    b.HasOne("Domain.Entities.User", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId");

                    b.HasOne("Domain.Entities.TranscriptData", "TranscriptData")
                        .WithMany()
                        .HasForeignKey("TranscriptDataId");

                    b.HasOne("Domain.Entities.User", "UploaderUser")
                        .WithMany()
                        .HasForeignKey("UploaderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GraduationProcess");

                    b.Navigation("StudentUser");

                    b.Navigation("TranscriptData");

                    b.Navigation("UploaderUser");
                });

            modelBuilder.Entity("Domain.Entities.GraduationProcess", b =>
                {
                    b.HasOne("Domain.Entities.User", "AdvisorUser")
                        .WithMany()
                        .HasForeignKey("AdvisorUserId");

                    b.HasOne("Domain.Entities.User", "DeansOfficeUser")
                        .WithMany()
                        .HasForeignKey("DeansOfficeUserId");

                    b.HasOne("Domain.Entities.User", "DeptSecretaryUser")
                        .WithMany()
                        .HasForeignKey("DeptSecretaryUserId");

                    b.HasOne("Domain.Entities.User", "StudentAffairsUser")
                        .WithMany()
                        .HasForeignKey("StudentAffairsUserId");

                    b.HasOne("Domain.Entities.User", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvisorUser");

                    b.Navigation("DeansOfficeUser");

                    b.Navigation("DeptSecretaryUser");

                    b.Navigation("StudentAffairsUser");

                    b.Navigation("StudentUser");
                });

            modelBuilder.Entity("Domain.Entities.GraduationRequirementSet", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithOne("GraduationRequirementSet")
                        .HasForeignKey("Domain.Entities.GraduationRequirementSet", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Department");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.User", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GraduationProcess", "RelatedProcess")
                        .WithMany("Notifications")
                        .HasForeignKey("RelatedProcessId");

                    b.Navigation("RecipientUser");

                    b.Navigation("RelatedProcess");
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RankingList", b =>
                {
                    b.HasOne("Domain.Entities.User", "GeneratedByUser")
                        .WithMany()
                        .HasForeignKey("GeneratedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Department", "ScopeDepartment")
                        .WithMany()
                        .HasForeignKey("ScopeDepartmentId");

                    b.HasOne("Domain.Entities.Faculty", "ScopeFaculty")
                        .WithMany()
                        .HasForeignKey("ScopeFacultyId");

                    b.Navigation("GeneratedByUser");

                    b.Navigation("ScopeDepartment");

                    b.Navigation("ScopeFaculty");
                });

            modelBuilder.Entity("Domain.Entities.RankingListCriteria", b =>
                {
                    b.HasOne("Domain.Entities.RankingList", "RankingList")
                        .WithMany("Criteria")
                        .HasForeignKey("RankingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RankingList");
                });

            modelBuilder.Entity("Domain.Entities.RankingListEntry", b =>
                {
                    b.HasOne("Domain.Entities.RankingList", "RankingList")
                        .WithMany("Entries")
                        .HasForeignKey("RankingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RankingList");

                    b.Navigation("StudentUser");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RequirementMandatoryCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("RequirementMandatoryCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GraduationRequirementSet", "GraduationRequirementSet")
                        .WithMany("MandatoryCourses")
                        .HasForeignKey("GraduationRequirementSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("GraduationRequirementSet");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("StaffMembers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Domain.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("StaffProfile")
                        .HasForeignKey("Domain.Entities.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.User", "AssignedAdvisor")
                        .WithMany()
                        .HasForeignKey("AssignedAdvisorUserId");

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("Domain.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedAdvisor");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TranscriptData", b =>
                {
                    b.HasOne("Domain.Entities.User", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentUser");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ValidationCode", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseTakens");

                    b.Navigation("RequirementMandatoryCourses");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("GraduationRequirementSet");

                    b.Navigation("StaffMembers");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.GraduationProcess", b =>
                {
                    b.Navigation("EligibilityCheckResults");

                    b.Navigation("FileAttachments");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.GraduationRequirementSet", b =>
                {
                    b.Navigation("MandatoryCourses");
                });

            modelBuilder.Entity("Domain.Entities.RankingList", b =>
                {
                    b.Navigation("Criteria");

                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("StaffProfile");

                    b.Navigation("StudentProfile");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
